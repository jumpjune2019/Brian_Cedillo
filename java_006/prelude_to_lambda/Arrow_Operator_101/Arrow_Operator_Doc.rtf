Arrow Functions within JavaScript are a way to simplify code.

CANNOT BE USED AS A CONSTRUCTOR

* Shorter Syntax
      function funcName(params) {
       return params + 2;
      }
    TO
    var funcName = (params) => params + 2

  It works like this:
    * (parameters) => { statements }

  No Parameters:
    * () => { statements }

  ONE Parameter:
    * parameters => { statements }

  If you are RETURNING an expression, you remove the brackets:
    * var double = num => num * 2

  Test it out in Chrome Developer Console:
    Cmd + Option + J to open console (on Mac), Ctrl + Shift + J (Windows)
    Type:
       var double = num => num * 2
       to run: double(x)
          example:
            double(2)
            * this will return 4
* No binding of "this"
    function Counter() {
      this.num = 0;
    this.timer = setInterval(function add() {
        console.log(this);
      }, 1000);
    }
    var b = new Counter();
  CLEAR:
    clearInterval(b.timer);

    function Counter() {
      this.num = 0;
      this.timer = setInterval(() => {
        this.num++;
        console.log(this.num);
      }, 1000);
    }
    var b = new Counter();
    // 1
    // 2
    // 3
    // ...

  CLEAR:
    clearInterval(b.timer);

    function Counter() {
      var that = this;
    this.timer = setInterval(() => {
        console.log(this === that);
      }, 1000);
    }
    var b = new Counter();
    // true
    // true
    // ...
  CLEAR:
    clearInterval(b.timer);
